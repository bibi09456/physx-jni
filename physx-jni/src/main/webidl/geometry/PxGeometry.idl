/****************************************
 * [package=geometry]
 ****************************************/

[Prefix="physx::", StackAllocatable]
interface PxBoxGeometry {
    void PxBoxGeometry(float hx, float hy, float hz);
    [Value] attribute PxVec3 halfExtents;
};
PxBoxGeometry implements PxGeometry;

[Prefix="physx::", NoDelete]
interface PxBVH { };
PxBVH implements PxBase;

[Prefix="physx::", StackAllocatable]
interface PxCapsuleGeometry {
    void PxCapsuleGeometry(float radius, float halfHeight);
    attribute float radius;
    attribute float halfHeight;
};
PxCapsuleGeometry implements PxGeometry;

[Prefix="physx::"]
interface PxContactBuffer {
    void reset();
    boolean contact([Const, Ref] PxVec3 worldPoint, [Const, Ref] PxVec3 worldNormalIn, float separation, optional unsigned long faceIndex1);
    boolean contact([Const, Ref] PxContactPoint pt);
    [Platforms="windows;linux;macos;android"] PxContactPoint contact();

    [Value] attribute PxContactPoint[] contacts;
    attribute unsigned long count;
    attribute unsigned long pad;
    static readonly attribute unsigned long MAX_CONTACTS;
};

[Prefix="physx::"]
interface PxContactPoint {
    void PxContactPoint();
    [Value] attribute PxVec3 normal;
    [Value] attribute PxVec3 point;
    [Value] attribute PxVec3 targetVel;
    attribute float separation;
    attribute float maxImpulse;
    attribute float staticFriction;
    attribute octet materialFlags;
    attribute unsigned long internalFaceIndex1;
    attribute float dynamicFriction;
    attribute float restitution;
    attribute float damping;
};

[Prefix="physx::", NoDelete]
interface PxConvexMesh {
    unsigned long getNbVertices();
    [Const] PxVec3 getVertices();
    [Value] PxU8ConstPtr getIndexBuffer();
    unsigned long getNbPolygons();
    boolean getPolygonData(unsigned long index, [Ref] PxHullPolygon data);
    [Value] PxBounds3 getLocalBounds();
    boolean isGpuCompatible();
};
PxConvexMesh implements PxRefCounted;

[Prefix="physx::", StackAllocatable]
interface PxConvexMeshGeometry {
    void PxConvexMeshGeometry(PxConvexMesh mesh, [Const, Ref] optional PxMeshScale scaling, [Ref] optional PxConvexMeshGeometryFlags flags);
    [Value] attribute PxMeshScale scale;
    attribute PxConvexMesh convexMesh;
    [Value] attribute PxConvexMeshGeometryFlags meshFlags;
};
PxConvexMeshGeometry implements PxGeometry;

enum PxConvexMeshGeometryFlagEnum {
    "PxConvexMeshGeometryFlagEnum::eTIGHT_BOUNDS"
};

[Prefix="physx::", StackAllocatable]
interface PxConvexMeshGeometryFlags {
    void PxConvexMeshGeometryFlags(octet flags);
    boolean isSet(PxConvexMeshGeometryFlagEnum flag);
    void raise(PxConvexMeshGeometryFlagEnum flag);
    void clear(PxConvexMeshGeometryFlagEnum flag);
};

[Platforms="windows;linux;macos;android", Prefix="physx::"]
interface PxCustomGeometry {
    void PxCustomGeometry([Ref] SimpleCustomGeometryCallbacks callbacks);
    boolean isValid();
};
PxCustomGeometry implements PxGeometry;

[Platforms="windows;linux;macos;android"]
interface SimpleCustomGeometryCallbacks {
    PxBounds3 getLocalBoundsImpl([Const, Ref] PxGeometry geometry);
    boolean generateContactsImpl([Const, Ref] PxGeometry geom0, [Const, Ref] PxGeometry geom1, [Const, Ref] PxTransform pose0,
                             [Const, Ref] PxTransform pose1, float contactDistance, float meshContactMargin, float toleranceLength,
                             [Ref] PxContactBuffer contactBuffer);
    unsigned long raycastImpl([Const, Ref] PxVec3 origin, [Const, Ref] PxVec3 unitDir, [Const, Ref] PxGeometry geom, [Const, Ref] PxTransform pose,
                          float maxDist, [Ref] PxHitFlags hitFlags, unsigned long maxHits, PxGeomRaycastHit rayHits, unsigned long stride);
    boolean overlapImpl([Const, Ref] PxGeometry geom0, [Const, Ref] PxTransform pose0, [Const, Ref] PxGeometry geom1, [Const, Ref] PxTransform pose1);
    boolean sweepImpl([Const, Ref] PxVec3 unitDir, float maxDist, [Const, Ref] PxGeometry geom0, [Const, Ref] PxTransform pose0,
                        [Const, Ref] PxGeometry geom1, [Const, Ref] PxTransform pose1, [Ref] PxGeomSweepHit sweepHit, [Ref] PxHitFlags hitFlags,
                        float inflation);
    void computeMassPropertiesImpl([Const, Ref] PxGeometry geometry, [Ref] PxMassProperties massProperties);
    boolean usePersistentContactManifoldImpl([Const, Ref] PxGeometry geometry);

    attribute float persistentContactManifold_outBreakingThreshold;
};

[Platforms="windows;linux;macos;android", JSImplementation="SimpleCustomGeometryCallbacks"]
interface SimpleCustomGeometryCallbacksImpl {
    PxBounds3 getLocalBoundsImpl([Const, Ref] PxGeometry geometry);
    boolean generateContactsImpl([Const, Ref] PxGeometry geom0, [Const, Ref] PxGeometry geom1, [Const, Ref] PxTransform pose0,
                             [Const, Ref] PxTransform pose1, float contactDistance, float meshContactMargin, float toleranceLength,
                             [Ref] PxContactBuffer contactBuffer);
    unsigned long raycastImpl([Const, Ref] PxVec3 origin, [Const, Ref] PxVec3 unitDir, [Const, Ref] PxGeometry geom, [Const, Ref] PxTransform pose,
                          float maxDist, [Ref] PxHitFlags hitFlags, unsigned long maxHits, PxGeomRaycastHit rayHits, unsigned long stride);
    boolean overlapImpl([Const, Ref] PxGeometry geom0, [Const, Ref] PxTransform pose0, [Const, Ref] PxGeometry geom1, [Const, Ref] PxTransform pose1);
    boolean sweepImpl([Const, Ref] PxVec3 unitDir, float maxDist, [Const, Ref] PxGeometry geom0, [Const, Ref] PxTransform pose0,
                        [Const, Ref] PxGeometry geom1, [Const, Ref] PxTransform pose1, [Ref] PxGeomSweepHit sweepHit, [Ref] PxHitFlags hitFlags,
                        float inflation);
    void computeMassPropertiesImpl([Const, Ref] PxGeometry geometry, [Ref] PxMassProperties massProperties);
    boolean usePersistentContactManifoldImpl([Const, Ref] PxGeometry geometry);
};

[Prefix="physx::"]
interface PxGeometry {
    PxGeometryTypeEnum getType();
};

[Prefix="physx::"]
interface PxGeometryHolder {
    void PxGeometryHolder();
    void PxGeometryHolder([Const, Ref] PxGeometry geometry);
    PxGeometryTypeEnum getType();
    //[Ref] PxGeometry any();       // does not work: any is a keyword
    [Ref] PxSphereGeometry sphere();
    [Ref] PxPlaneGeometry plane();
    [Ref] PxCapsuleGeometry capsule();
    [Ref] PxBoxGeometry box();
    [Ref] PxConvexMeshGeometry convexMesh();
    [Ref] PxTriangleMeshGeometry triangleMesh();
    [Ref] PxHeightFieldGeometry heightField();
    void storeAny([Const, Ref] PxGeometry geometry);
};

[Prefix="physx::"]
interface PxGeometryQuery {
    static boolean sweep([Const, Ref] PxVec3 unitDir, float maxDist, [Const, Ref] PxGeometry geom0, [Const, Ref] PxTransform pose0,
                         [Const, Ref] PxGeometry geom1, [Const, Ref] PxTransform pose1, [Ref] PxSweepHit sweepHit,
                         [Ref] optional PxHitFlags hitFlags, optional float inflation);
    static boolean overlap([Const, Ref] PxGeometry geom0, [Const, Ref] PxTransform pose0,
                           [Const, Ref] PxGeometry geom1, [Const, Ref] PxTransform pose1);
    static unsigned long raycast([Const, Ref] PxVec3 origin, [Const, Ref] PxVec3 unitDir, [Const, Ref] PxGeometry geom,
                           [Const, Ref] PxTransform pose, float maxDist, [Ref] PxHitFlags hitFlags,
                           unsigned long maxHits, PxRaycastHit rayHits);
//    static boolean computePenetration([Ref] PxVec3 direction, [Ref] float depth, [Const, Ref] PxGeometry geom0,
//                        [Const, Ref] PxTransform pose0, [Const, Ref] PxGeometry geom1, [Const, Ref] PxTransform pose1);
    static float pointDistance([Const, Ref] PxVec3 point, [Const, Ref] PxGeometry geom, [Const, Ref] PxTransform pose, optional PxVec3 closestPoint);
    static void computeGeomBounds([Ref] PxBounds3 bounds, [Const, Ref] PxGeometry geom, [Const, Ref] PxTransform pose, optional float inflation);
    static boolean isValid([Const, Ref] PxGeometry geom);
};

enum PxGeometryTypeEnum {
    "PxGeometryTypeEnum::eSPHERE",
    "PxGeometryTypeEnum::ePLANE",
    "PxGeometryTypeEnum::eCAPSULE",
    "PxGeometryTypeEnum::eBOX",
    "PxGeometryTypeEnum::eCONVEXMESH",
    "PxGeometryTypeEnum::eTRIANGLEMESH",
    "PxGeometryTypeEnum::eHEIGHTFIELD",
    "PxGeometryTypeEnum::eCUSTOM"
};

[Prefix="physx::", NoDelete]
interface PxHeightField {
    unsigned long saveCells(VoidPtr destBuffer, unsigned long destBufferSize);
    boolean modifySamples(long startCol, long startRow, [Const, Ref] PxHeightFieldDesc subfieldDesc, optional boolean shrinkBounds);
    unsigned long getNbRows();
    unsigned long getNbColumns();
    PxHeightFieldFormatEnum getFormat();
    unsigned long getSampleStride();
    float getConvexEdgeThreshold();
    [Value] PxHeightFieldFlags getFlags();
    float getHeight(float x, float z);
    unsigned short getTriangleMaterialIndex(unsigned long triangleIndex);
    [Value] PxVec3 getTriangleNormal(unsigned long triangleIndex);
    [Const, Ref] PxHeightFieldSample getSample(unsigned long row, unsigned long column);
    unsigned long getTimestamp();
};
PxHeightField implements PxRefCounted;

[Prefix="physx::", StackAllocatable]
interface PxHeightFieldDesc {
    void PxHeightFieldDesc();
    void setToDefault();
    boolean isValid();
    attribute unsigned long nbRows;
    attribute unsigned long nbColumns;
    attribute PxHeightFieldFormatEnum format;
    [Value] attribute PxStridedData samples;
    attribute float convexEdgeThreshold;
    [Value] attribute PxHeightFieldFlags flags;
};

[Prefix="physx::", StackAllocatable]
interface PxHeightFieldFlags {
    void PxHeightFieldFlags(unsigned short flags);
    boolean isSet(PxHeightFieldFlagEnum flag);
    void raise(PxHeightFieldFlagEnum flag);
    void clear(PxHeightFieldFlagEnum flag);
};

enum PxHeightFieldFlagEnum {
    "PxHeightFieldFlagEnum::eNO_BOUNDARY_EDGES"
};

enum PxHeightFieldFormatEnum {
    "PxHeightFieldFormatEnum::eS16_TM"
};

[Prefix="physx::", StackAllocatable]
interface PxHeightFieldGeometry {
    void PxHeightFieldGeometry();
    void PxHeightFieldGeometry(PxHeightField hf, [Ref] PxMeshGeometryFlags flags, float heightScale, float rowScale, float columnScale);
    boolean isValid();
    attribute PxHeightField heightField;
    attribute float heightScale;
    attribute float rowScale;
    attribute float columnScale;
    [Value] attribute PxMeshGeometryFlags heightFieldFlags;
};
PxHeightFieldGeometry implements PxGeometry;

[Prefix="physx::", StackAllocatable]
interface PxHeightFieldSample {
    void PxHeightFieldSample();
    octet tessFlag();
    void clearTessFlag();
    void setTessFlag();
    attribute short height;
    attribute octet materialIndex0;
    attribute octet materialIndex1;
};

[Prefix="physx::", StackAllocatable]
interface PxHullPolygon {
    void PxHullPolygon();
    attribute float[] mPlane;
    attribute short mNbVerts;
    attribute short mIndexBase;
};

enum PxMeshFlagEnum {
    "PxMeshFlagEnum::eFLIPNORMALS",
    "PxMeshFlagEnum::e16_BIT_INDICES"
};

[Prefix="physx::", StackAllocatable]
interface PxMeshFlags {
    void PxMeshFlags(octet flags);
    boolean isSet(PxMeshFlagEnum flag);
    void raise(PxMeshFlagEnum flag);
    void clear(PxMeshFlagEnum flag);
};

enum PxMeshGeometryFlagEnum {
    "PxMeshGeometryFlagEnum::eDOUBLE_SIDED"
};

[Prefix="physx::", StackAllocatable]
interface PxMeshGeometryFlags {
    void PxMeshGeometryFlags(octet flags);
    boolean isSet(PxMeshGeometryFlagEnum flag);
    void raise(PxMeshGeometryFlagEnum flag);
    void clear(PxMeshGeometryFlagEnum flag);
};

[Prefix="physx::", StackAllocatable]
interface PxMeshScale {
    void PxMeshScale();
    void PxMeshScale(float r);
    void PxMeshScale([Const, Ref] PxVec3 s, [Const, Ref] PxQuat r);
};

[Prefix="physx::", StackAllocatable]
interface PxPlaneGeometry {
    void PxPlaneGeometry();
};
PxPlaneGeometry implements PxGeometry;

[Prefix="physx::"]
interface PxSimpleTriangleMesh {
    void PxSimpleTriangleMesh();
    void setToDefault();
    boolean isValid();
    [Value] attribute PxBoundedData points;
    [Value] attribute PxBoundedData triangles;
    [Value] attribute PxMeshFlags flags;
};

[Prefix="physx::", StackAllocatable]
interface PxSphereGeometry {
    void PxSphereGeometry(float ir);
    attribute float radius;
};
PxSphereGeometry implements PxGeometry;

[Prefix="physx::", NoDelete]
interface PxTetMaker {
    static boolean createConformingTetrahedronMesh([Const, Ref] PxSimpleTriangleMesh triangleMesh, [Ref] PxArray_PxVec3 outVertices, [Ref] PxArray_PxU32 outTetIndices, boolean validate, float volumeThreshold);
    static boolean createVoxelTetrahedronMesh([Const, Ref] PxTetrahedronMeshDesc tetMesh, unsigned long numVoxelsAlongLongestBoundingBoxAxis, [Ref] PxArray_PxVec3 outVertices, [Ref] PxArray_PxU32 outTetIndices); //, optional PxI32 inputPointToOutputTetIndex, optional PxU32 anchorNodeIndices, unsigned long numTetsPerVoxel
    static boolean createVoxelTetrahedronMeshFromEdgeLength([Const, Ref] PxTetrahedronMeshDesc tetMesh, float voxelEdgeLength, [Ref] PxArray_PxVec3 outVertices, [Ref] PxArray_PxU32 outTetIndices); //, optional PxI32 inputPointToOutputTetIndex, [Const] optional PxU32 anchorNodeIndices, unsigned long numTetsPerVoxel
    [Value] static PxTriangleMeshAnalysisResults validateTriangleMesh([Const, Ref] PxSimpleTriangleMesh triangleMesh, float minVolumeThreshold, float minTriangleAngleRadians);
    [Value] static PxTetrahedronMeshAnalysisResults validateTetrahedronMesh([Const, Ref] PxBoundedData points, [Const, Ref] PxBoundedData tetrahedra, float minTetVolumeThreshold);
    static void simplifyTriangleMesh([Const, Ref] PxArray_PxVec3 inputVertices, [Const, Ref] PxArray_PxU32 inputIndices, long targetTriangleCount, float maximalEdgeLength, [Ref] PxArray_PxVec3 outputVertices, [Ref] PxArray_PxU32 outputIndices, optional PxArray_PxU32 vertexMap, optional float edgeLengthCostWeight, optional float flatnessDetectionThreshold, optional boolean projectSimplifiedPointsOnInputMeshSurface, optional PxArray_PxU32 outputVertexToInputTriangle, optional boolean removeDisconnectedPatches);
    static void remeshTriangleMesh([Const, Ref] PxArray_PxVec3 inputVertices, [Const, Ref] PxArray_PxU32 inputIndices, unsigned long gridResolution, [Ref] PxArray_PxVec3 outputVertices, [Ref] PxArray_PxU32 outputIndices, optional PxArray_PxU32 vertexMap);
    //static void remeshTriangleMesh([Const] PxVec3 inputVertices, unsigned long nbVertices, [Const] PxU32 inputIndices, unsigned long nbIndices, unsigned long gridResolution, [Ref] PxArray<PxVec3> outputVertices, [Ref] PxArray<PxU32> outputIndices, [Ref] optional PxArray<PxU32> *vertexMap);
    static void createTreeBasedTetrahedralMesh([Const, Ref] PxArray_PxVec3 inputVertices, [Const, Ref] PxArray_PxU32 inputIndices, boolean useTreeNodes, [Ref] PxArray_PxVec3 outputVertices, [Ref] PxArray_PxU32 outputIndices, float volumeThreshold);
    static void createRelaxedVoxelTetrahedralMesh([Const, Ref] PxArray_PxVec3 inputVertices, [Const, Ref] PxArray_PxU32 inputIndices, [Ref] PxArray_PxVec3 outputVertices, [Ref] PxArray_PxU32 outputIndices, long resolution, optional long numRelaxationIterations, optional float relMinTetVolume);
    static void detectTriangleIslands([Ref] PxI32ConstPtr triangles, unsigned long numTriangles, [Ref] PxArray_PxU32 islandIndexPerTriangle);
    static unsigned long findLargestIslandId([Ref] PxU32ConstPtr islandIndexPerTriangle, unsigned long numTriangles);
};

enum PxTetrahedronMeshAnalysisResultEnum {
    "PxTetrahedronMeshAnalysisResultEnum::eVALID",
    "PxTetrahedronMeshAnalysisResultEnum::eDEGENERATE_TETRAHEDRON",
    "PxTetrahedronMeshAnalysisResultEnum::eMESH_IS_PROBLEMATIC",
    "PxTetrahedronMeshAnalysisResultEnum::eMESH_IS_INVALID",
};

[Prefix="physx::", StackAllocatable]
interface PxTetrahedronMeshAnalysisResults {
    void PxTetrahedronMeshAnalysisResults(unsigned long flags);
    boolean isSet(PxTetrahedronMeshAnalysisResultEnum flag);
    void raise(PxTetrahedronMeshAnalysisResultEnum flag);
    void clear(PxTetrahedronMeshAnalysisResultEnum flag);
};

[Prefix="physx::", StackAllocatable]
interface PxTetrahedronMeshDesc {
    void PxTetrahedronMeshDesc();
    void PxTetrahedronMeshDesc([Ref] PxArray_PxVec3 meshVertices, [Ref] PxArray_PxU32 meshTetIndices, optional PxTetrahedronMeshFormatEnum meshFormat, optional unsigned short numberOfTetsPerHexElement);
    boolean isValid();
    [Value] attribute PxTypedBoundedData_PxU16 materialIndices;
    [Value] attribute PxBoundedData points;
    [Value] attribute PxBoundedData tetrahedrons;
    [Value] attribute PxMeshFlags flags;
    attribute short tetsPerElement;
};

[Prefix="physx::", NoDelete]
interface PxTetrahedronMesh {
    unsigned long getNbVertices();
    [Const] PxVec3 getVertices();
    unsigned long getNbTetrahedrons();
    [Const] VoidPtr getTetrahedrons();
    [Value] PxTetrahedronMeshFlags getTetrahedronMeshFlags();
    [Value] PxU32ConstPtr getTetrahedraRemap();
    [Value] PxBounds3 getLocalBounds();
};
PxTetrahedronMesh implements PxRefCounted;

[Prefix="physx::", NoDelete]
interface PxTetrahedronMeshExt {
    static long findTetrahedronContainingPoint([Const] PxTetrahedronMesh mesh, [Const, Ref] PxVec3 point, [Ref] PxVec4 bary, float tolerance);
    static long findTetrahedronClosestToPoint([Const] PxTetrahedronMesh mesh, [Const, Ref] PxVec3 point, [Ref] PxVec4 bary);
    static void createPointsToTetrahedronMap([Const, Ref] PxArray_PxVec3 tetMeshVertices, [Const, Ref] PxArray_PxU32 tetMeshIndices, [Const, Ref] PxArray_PxVec3 pointsToEmbed, [Ref] PxArray_PxVec4 barycentricCoordinates, [Ref] PxArray_PxU32 tetLinks);
    //static void extractTetMeshSurface(VoidPtr tetrahedra, unsigned long numTetrahedra, boolean sixteenBitIndices, [Ref] PxArray_PxU32 surfaceTriangles, optional PxArray_PxU32 surfaceTriangleToTet, optional boolean flipTriangleOrientation);
    static void extractTetMeshSurface([Const] PxTetrahedronMesh mesh, [Ref] PxArray_PxU32 surfaceTriangles, optional PxArray_PxU32 surfaceTriangleToTet, optional boolean flipTriangleOrientation);
};

enum PxTetrahedronMeshFlagEnum {
    "PxTetrahedronMeshFlagEnum::e16_BIT_INDICES"
};

[Prefix="physx::", StackAllocatable]
interface PxTetrahedronMeshFlags {
    void PxTetrahedronMeshFlags(octet flags);
    boolean isSet(PxTetrahedronMeshFlagEnum flag);
    void raise(PxTetrahedronMeshFlagEnum flag);
    void clear(PxTetrahedronMeshFlagEnum flag);
};

enum PxTetrahedronMeshFormatEnum {
    "PxTetrahedronMeshFormatEnum::eTET_MESH",
    "PxTetrahedronMeshFormatEnum::eHEX_MESH"
};

[Prefix="physx::", NoDelete]
interface PxTetrahedronMeshGeometry {
    void PxTetrahedronMeshGeometry(PxTetrahedronMesh mesh);
    boolean isValid();
    attribute PxTetrahedronMesh tetrahedronMesh;
};
PxTetrahedronMeshGeometry implements PxGeometry;

[Prefix="physx::"]
interface PxTriangle {
    void PxTriangle();
    void PxTriangle([Const, Ref] PxVec3 p0, [Const, Ref] PxVec3 p1, [Const, Ref] PxVec3 p2);
    void normal([Ref] PxVec3 normal);
    void denormalizedNormal([Ref] PxVec3 normal);
    float area();
    [Value] PxVec3 pointFromUV(float u, float v);
};

[Prefix="physx::", NoDelete]
interface PxTriangleMesh {
    unsigned long getNbVertices();
    [Const] PxVec3 getVertices();
    PxVec3 getVerticesForModification();
    [Value] PxBounds3 refitBVH();
    unsigned long getNbTriangles();
    [Const] VoidPtr getTriangles();
    [Value] PxTriangleMeshFlags getTriangleMeshFlags();
    [Const, Value] PxU32ConstPtr getTrianglesRemap();
    unsigned short getTriangleMaterialIndex(unsigned long triangleIndex);
    [Value] PxBounds3 getLocalBounds();
};
PxTriangleMesh implements PxRefCounted;

enum PxTriangleMeshAnalysisResultEnum {
    "PxTriangleMeshAnalysisResultEnum::eVALID",
    "PxTriangleMeshAnalysisResultEnum::eZERO_VOLUME",
    "PxTriangleMeshAnalysisResultEnum::eOPEN_BOUNDARIES",
    "PxTriangleMeshAnalysisResultEnum::eSELF_INTERSECTIONS",
    "PxTriangleMeshAnalysisResultEnum::eINCONSISTENT_TRIANGLE_ORIENTATION",
    "PxTriangleMeshAnalysisResultEnum::eCONTAINS_ACUTE_ANGLED_TRIANGLES",
    "PxTriangleMeshAnalysisResultEnum::eEDGE_SHARED_BY_MORE_THAN_TWO_TRIANGLES",
    "PxTriangleMeshAnalysisResultEnum::eCONTAINS_DUPLICATE_POINTS",
    "PxTriangleMeshAnalysisResultEnum::eCONTAINS_INVALID_POINTS",
    "PxTriangleMeshAnalysisResultEnum::eREQUIRES_32BIT_INDEX_BUFFER",
    "PxTriangleMeshAnalysisResultEnum::eTRIANGLE_INDEX_OUT_OF_RANGE",
    "PxTriangleMeshAnalysisResultEnum::eMESH_IS_PROBLEMATIC",
    "PxTriangleMeshAnalysisResultEnum::eMESH_IS_INVALID",
};

[Prefix="physx::", StackAllocatable]
interface PxTriangleMeshAnalysisResults {
    void PxTriangleMeshAnalysisResults(unsigned long flags);
    boolean isSet(PxTriangleMeshAnalysisResultEnum flag);
    void raise(PxTriangleMeshAnalysisResultEnum flag);
    void clear(PxTriangleMeshAnalysisResultEnum flag);
};

enum PxTriangleMeshFlagEnum {
    "PxTriangleMeshFlagEnum::e16_BIT_INDICES",
    "PxTriangleMeshFlagEnum::eADJACENCY_INFO"
};

[Prefix="physx::", StackAllocatable]
interface PxTriangleMeshFlags {
    void PxTriangleMeshFlags(octet flags);
    boolean isSet(PxTriangleMeshFlagEnum flag);
    void raise(PxTriangleMeshFlagEnum flag);
    void clear(PxTriangleMeshFlagEnum flag);
};

[Prefix="physx::", StackAllocatable]
interface PxTriangleMeshGeometry {
    void PxTriangleMeshGeometry(PxTriangleMesh mesh, [Const, Ref] optional PxMeshScale scaling, [Ref] optional PxMeshGeometryFlags flags);
    boolean isValid();
    [Value] attribute PxMeshScale scale;
    [Value] attribute PxMeshGeometryFlags meshFlags;
    attribute PxTriangleMesh triangleMesh;
};
PxTriangleMeshGeometry implements PxGeometry;
