/****************************************
 * Static functions / fields
 ****************************************/

[NoDelete]
interface PxTopLevelFunctions {
    static readonly attribute unsigned long PHYSICS_VERSION;

    [Value] static PxSimulationFilterShader DefaultFilterShader();
    static void setupPassThroughFilterShader(PxSceneDesc sceneDesc, PassThroughFilterShader filterShader);

    static PxControllerManager CreateControllerManager([Ref] PxScene scene, optional boolean lockingEnabled);
    static PxFoundation CreateFoundation(unsigned long version, [Ref] PxDefaultAllocator allocator, [Ref] PxErrorCallback errorCallback);
    static PxPhysics CreatePhysics(unsigned long version, [Ref] PxFoundation foundation, [Const, Ref] PxTolerancesScale params, [Nullable] optional PxPvd pvd, [Nullable] optional PxOmniPvd omniPvd);
    static PxDefaultCpuDispatcher DefaultCpuDispatcherCreate(unsigned long numThreads);
    static boolean InitExtensions([Ref] PxPhysics physics);
    static void CloseExtensions();
    static PxPvd CreatePvd([Ref] PxFoundation foundation);
    [Platforms="windows;linux;macos"] static PxPvdTransport DefaultPvdSocketTransportCreate(DOMString host, long port, unsigned long timeoutInMilliseconds);
    [Platforms="windows;linux;macos"] static PxOmniPvd CreateOmniPvd([Ref] PxFoundation foundation);

    static PxD6Joint D6JointCreate([Ref] PxPhysics physics, [Nullable] PxRigidActor actor0, [Ref] PxTransform localFrame0, [Nullable] PxRigidActor actor1, [Ref] PxTransform localFrame1);
    static PxDistanceJoint DistanceJointCreate([Ref] PxPhysics physics, [Nullable] PxRigidActor actor0, [Ref] PxTransform localFrame0, [Nullable] PxRigidActor actor1, [Ref] PxTransform localFrame1);
    static PxFixedJoint FixedJointCreate([Ref] PxPhysics physics, [Nullable] PxRigidActor actor0, [Ref] PxTransform localFrame0, [Nullable] PxRigidActor actor1, [Ref] PxTransform localFrame1);
    static PxGearJoint GearJointCreate([Ref] PxPhysics physics, PxRigidActor actor0, [Ref] PxTransform localFrame0, PxRigidActor actor1, [Ref] PxTransform localFrame1);
    static PxPrismaticJoint PrismaticJointCreate([Ref] PxPhysics physics, [Nullable] PxRigidActor actor0, [Ref] PxTransform localFrame0, [Nullable] PxRigidActor actor1, [Ref] PxTransform localFrame1);
    static PxRackAndPinionJoint RackAndPinionJointCreate([Ref] PxPhysics physics, PxRigidActor actor0, [Ref] PxTransform localFrame0, PxRigidActor actor1, [Ref] PxTransform localFrame1);
    static PxRevoluteJoint RevoluteJointCreate([Ref] PxPhysics physics, [Nullable] PxRigidActor actor0, [Ref] PxTransform localFrame0, [Nullable] PxRigidActor actor1, [Ref] PxTransform localFrame1);
    static PxSphericalJoint SphericalJointCreate([Ref] PxPhysics physics, [Nullable] PxRigidActor actor0, [Ref] PxTransform localFrame0, [Nullable] PxRigidActor actor1, [Ref] PxTransform localFrame1);

    static PxConvexMesh CreateConvexMesh([Const, Ref] PxCookingParams params, [Const, Ref] PxConvexMeshDesc desc);
    static PxTriangleMesh CreateTriangleMesh([Const, Ref] PxCookingParams params, [Const, Ref] PxTriangleMeshDesc desc);
    static PxHeightField CreateHeightField([Const, Ref] PxHeightFieldDesc desc);

    static boolean CookTriangleMesh([Const, Ref] PxCookingParams params, [Const, Ref] PxTriangleMeshDesc desc, [Ref] PxOutputStream stream);
    static boolean CookConvexMesh([Const, Ref] PxCookingParams params, [Const, Ref] PxConvexMeshDesc desc, [Ref] PxOutputStream stream);

    static PxRigidDynamic CreateDynamicFromShape([Ref] PxPhysics sdk, [Const, Ref] PxTransform transform, [Ref] PxShape shape, float density);
    static PxRigidDynamic CreateDynamic([Ref] PxPhysics sdk, [Const, Ref] PxTransform transform, [Const, Ref] PxGeometry geometry, [Ref] PxMaterial material, float density, [Const, Ref] optional PxTransform shapeOffset);
    static PxRigidDynamic CreateKinematicFromShape([Ref] PxPhysics sdk, [Const, Ref] PxTransform transform, [Ref] PxShape shape, float density);
    static PxRigidDynamic CreateKinematic([Ref] PxPhysics sdk, [Const, Ref] PxTransform transform, [Const, Ref] PxGeometry geometry, [Ref] PxMaterial material, float density, [Const, Ref] optional PxTransform shapeOffset);
    static PxRigidStatic CreateStaticFromShape([Ref] PxPhysics sdk, [Const, Ref] PxTransform transform, [Ref] PxShape shape);
    static PxRigidStatic CreateStatic([Ref] PxPhysics sdk, [Const, Ref] PxTransform transform, [Const, Ref] PxGeometry geometry, [Ref] PxMaterial material, [Const, Ref] PxTransform shapeOffset);
    static PxRigidStatic CreatePlane([Ref] PxPhysics sdk, [Const, Ref] PxPlane plane, [Ref] PxMaterial material);

    static PxShape CloneShape([Ref] PxPhysics physics, [Const, Ref] PxShape from, boolean isExclusive);
    static PxRigidStatic CloneStatic([Ref] PxPhysics physicsSDK, [Const, Ref] PxTransform transform, [Const, Ref] PxRigidActor from);
    static PxRigidDynamic CloneDynamic([Ref] PxPhysics physicsSDK, [Const, Ref] PxTransform transform, [Const, Ref] PxRigidDynamic from);

    static void ScaleRigidActor([Ref] PxRigidActor actor, float scale, boolean scaleMassProps);

    static void IntegrateTransform([Const, Ref] PxTransform curTrans, [Const, Ref] PxVec3 linvel, [Const, Ref] PxVec3 angvel, float timeStep, [Ref] PxTransform result);
};