/****************************************
 * [package=extensions]
 ****************************************/

enum PxD6AxisEnum {
    "PxD6AxisEnum::eX",
    "PxD6AxisEnum::eY",
    "PxD6AxisEnum::eZ",
    "PxD6AxisEnum::eTWIST",
    "PxD6AxisEnum::eSWING1",
    "PxD6AxisEnum::eSWING2"
};

enum PxD6DriveEnum {
    "PxD6DriveEnum::eX",
    "PxD6DriveEnum::eY",
    "PxD6DriveEnum::eZ",
    "PxD6DriveEnum::eSWING",
    "PxD6DriveEnum::eTWIST",
    "PxD6DriveEnum::eSLERP"
};

[Prefix="physx::"]
interface PxD6Joint {
    void setMotion(PxD6AxisEnum axis, PxD6MotionEnum type);
    PxD6MotionEnum getMotion(PxD6AxisEnum axis);
    float getTwistAngle();
    float getSwingYAngle();
    float getSwingZAngle();
    void setDistanceLimit([Const, Ref] PxJointLinearLimit limit);
    //[Value] PxJointLinearLimit getDistanceLimit();
    void setLinearLimit(PxD6AxisEnum axis, [Const, Ref] PxJointLinearLimitPair limit);
    //[Value] PxJointLinearLimitPair getLinearLimit(PxD6AxisEnum axis);
    void setTwistLimit([Const, Ref] PxJointAngularLimitPair limit);
    //[Value] PxJointAngularLimitPair getTwistLimit();
    void setSwingLimit([Const, Ref] PxJointLimitCone limit);
    //[Value] PxJointLimitCone getSwingLimit();
    void setPyramidSwingLimit([Const, Ref] PxJointLimitPyramid limit);
    //[Value] PxJointLimitPyramid getPyramidSwingLimit();
    void setDrive(PxD6DriveEnum index, [Const, Ref] PxD6JointDrive drive);
    [Value] PxD6JointDrive getDrive(PxD6DriveEnum index);
    void setDrivePosition([Const, Ref] PxTransform pose, optional boolean autowake);
    [Value] PxTransform getDrivePosition();
    void setDriveVelocity([Const, Ref] PxVec3 linear, [Const, Ref] PxVec3 angular);
    void getDriveVelocity([Ref] PxVec3 linear, [Ref] PxVec3 angular);
};
PxD6Joint implements PxJoint;

[Prefix="physx::"]
interface PxD6JointDrive {
    void PxD6JointDrive();
    void PxD6JointDrive(float driveStiffness, float driveDamping, float driveForceLimit, optional boolean isAcceleration);

    attribute float forceLimit;
    [Value] attribute PxD6JointDriveFlags flags;
};
PxD6JointDrive implements PxSpring;

enum PxD6JointDriveFlagEnum {
    "PxD6JointDriveFlagEnum::eACCELERATION"
};

[Prefix="physx::", StackAllocatable]
interface PxD6JointDriveFlags {
    void PxD6JointDriveFlags(unsigned long flags);
    boolean isSet(PxD6JointDriveFlagEnum flag);
    void raise(PxD6JointDriveFlagEnum flag);
    void clear(PxD6JointDriveFlagEnum flag);
};

enum PxD6MotionEnum {
    "PxD6MotionEnum::eLOCKED",
    "PxD6MotionEnum::eLIMITED",
    "PxD6MotionEnum::eFREE"
};

[Prefix="physx::"]
interface PxDistanceJoint {
    float getDistance();
    void setMinDistance(float distance);
    float getMinDistance();
    void setMaxDistance(float distance);
    float getMaxDistance();
    void setTolerance(float tolerance);
    float getTolerance();
    void setStiffness(float stiffness);
    float getStiffness();
    void setDamping(float damping);
    float getDamping();
    void setDistanceJointFlags([Ref] PxDistanceJointFlags flags);
    void setDistanceJointFlag(PxDistanceJointFlagEnum flag, boolean value);
    [Value] PxDistanceJointFlags getDistanceJointFlags();
};
PxDistanceJoint implements PxJoint;

enum PxDistanceJointFlagEnum {
    "PxDistanceJointFlagEnum::eMAX_DISTANCE_ENABLED",
    "PxDistanceJointFlagEnum::eMIN_DISTANCE_ENABLED",
    "PxDistanceJointFlagEnum::eSPRING_ENABLED"
};

[Prefix="physx::", StackAllocatable]
interface PxDistanceJointFlags {
    void PxDistanceJointFlags(unsigned short flags);
    boolean isSet(PxDistanceJointFlagEnum flag);
    void raise(PxDistanceJointFlagEnum flag);
    void clear(PxDistanceJointFlagEnum flag);
};

[Prefix="physx::"]
interface PxFixedJoint { };
PxFixedJoint implements PxJoint;

[Prefix="physx::"]
interface PxGearJoint {
    boolean setHinges([Const] PxBase hinge0, [Const] PxBase hinge1);
    void setGearRatio(float ratio);
    float getGearRatio();
};
PxGearJoint implements PxJoint;

[Prefix="physx::", NoDelete]
interface PxJoint {
    void setActors(PxRigidActor actor0, PxRigidActor actor1);
    //void getActors(PxRigidActor actor0, PxRigidActor actor1);
    void setLocalPose(PxJointActorIndexEnum actor, [Const, Ref] PxTransform localPose);
    [Value] PxTransform getLocalPose(PxJointActorIndexEnum actor);
    [Value] PxTransform getRelativeTransform();
    [Value] PxVec3 getRelativeLinearVelocity();
    [Value] PxVec3 getRelativeAngularVelocity();
    void setBreakForce(float force, float torque);
    //void getBreakForce(float force, float torque);
    void setConstraintFlags([Ref] PxConstraintFlags flags);
    void setConstraintFlag(PxConstraintFlagEnum flag, boolean value);
    [Value] PxConstraintFlags getConstraintFlags();
    void setInvMassScale0(float invMassScale);
    float getInvMassScale0();
    void setInvMassScale1(float invMassScale);
    float getInvMassScale1();
    PxConstraint getConstraint();
    void setName([Const] DOMString name);
    [Const] DOMString getName();
    PxScene getScene();

    attribute VoidPtr userData;
};
PxJoint implements PxBase;

enum PxJointActorIndexEnum {
    "PxJointActorIndexEnum::eACTOR0",
    "PxJointActorIndexEnum::eACTOR1"
};

[Prefix="physx::", StackAllocatable]
interface PxJointAngularLimitPair {
    void PxJointAngularLimitPair(float lowerLimit, float upperLimit);
    void PxJointAngularLimitPair(float lowerLimit, float upperLimit, [Const, Ref] PxSpring spring);

    attribute float upper;
    attribute float lower;
};
PxJointAngularLimitPair implements PxJointLimitParameters;

[Prefix="physx::", StackAllocatable]
interface PxJointLimitCone {
    void PxJointLimitCone(float yLimitAngle, float zLimitAngle);
    void PxJointLimitCone(float yLimitAngle, float zLimitAngle, [Const, Ref] PxSpring spring);

    attribute float yAngle;
    attribute float zAngle;
};
PxJointLimitCone implements PxJointLimitParameters;

[Prefix="physx::", NoDelete]
interface PxJointLimitParameters {
    boolean isValid();
    boolean isSoft();

    attribute float restitution;
    attribute float bounceThreshold;
    attribute float stiffness;
    attribute float damping;
};

[Prefix="physx::", StackAllocatable]
interface PxJointLimitPyramid {
    void PxJointLimitPyramid(float yLimitAngleMin, float yLimitAngleMax, float zLimitAngleMin, float zLimitAngleMax);
    void PxJointLimitPyramid(float yLimitAngleMin, float yLimitAngleMax, float zLimitAngleMin, float zLimitAngleMax, [Const, Ref] PxSpring spring);

    attribute float yAngleMin;
    attribute float yAngleMax;
    attribute float zAngleMin;
    attribute float zAngleMax;
};
PxJointLimitPyramid implements PxJointLimitParameters;

[Prefix="physx::", StackAllocatable]
interface PxJointLinearLimit {
    // javascript bindings do not support overloaded functions with same parameter count
    //void PxJointLinearLimit([Const, Ref] PxTolerancesScale scale, float extent, optional float contactDist);
    void PxJointLinearLimit(float extent, [Const, Ref] PxSpring spring);

    attribute float value;
};
PxJointLinearLimit implements PxJointLimitParameters;

[Prefix="physx::", StackAllocatable]
interface PxJointLinearLimitPair {
    // javascript bindings do not support overloaded functions with same parameter count
    //void PxJointLinearLimitPair([Const, Ref] PxTolerancesScale scale, optional float lowerLimit, optional float upperLimit, optional float contactDist);
    void PxJointLinearLimitPair(float lowerLimit, float upperLimit, [Const, Ref] PxSpring spring);

    attribute float upper;
    attribute float lower;
};
PxJointLinearLimitPair implements PxJointLimitParameters;

[Prefix="physx::"]
interface PxPrismaticJoint {
    float getPosition();
    float getVelocity();
    void setLimit([Const, Ref] PxJointLinearLimitPair limit);
    //[Value] PxJointLinearLimitPair getLimit();
    void setPrismaticJointFlags([Ref] PxPrismaticJointFlags flags);
    void setPrismaticJointFlag(PxPrismaticJointFlagEnum flag, boolean value);
    [Value] PxPrismaticJointFlags getPrismaticJointFlags();
};
PxPrismaticJoint implements PxJoint;

enum PxPrismaticJointFlagEnum {
    "PxPrismaticJointFlagEnum::eLIMIT_ENABLED"
};

[Prefix="physx::", StackAllocatable]
interface PxPrismaticJointFlags {
    void PxPrismaticJointFlags(unsigned short flags);
    boolean isSet(PxPrismaticJointFlagEnum flag);
    void raise(PxPrismaticJointFlagEnum flag);
    void clear(PxPrismaticJointFlagEnum flag);
};

[Prefix="physx::"]
interface PxRackAndPinionJoint {
    boolean setJoints([Const] PxBase hinge, [Const] PxBase prismatic);
    void setRatio(float ratio);
    float getRatio();
    boolean setData(unsigned long nbRackTeeth, unsigned long nbPinionTeeth, float rackLength);
};
PxRackAndPinionJoint implements PxJoint;

[Prefix="physx::"]
interface PxRevoluteJoint {
    float getAngle();
    float getVelocity();
    void setLimit([Const, Ref] PxJointAngularLimitPair limits);
    //[Value] PxJointAngularLimitPair getLimit();
    void setDriveVelocity(float velocity, optional boolean autowake);
    float getDriveVelocity();
    void setDriveForceLimit(float limit);
    float getDriveForceLimit();
    void setDriveGearRatio(float ratio);
    float getDriveGearRatio();
    void setRevoluteJointFlags([Ref] PxRevoluteJointFlags flags);
    void setRevoluteJointFlag(PxRevoluteJointFlagEnum flag, boolean value);
    [Value] PxRevoluteJointFlags getRevoluteJointFlags();
};
PxRevoluteJoint implements PxJoint;

enum PxRevoluteJointFlagEnum {
    "PxRevoluteJointFlagEnum::eLIMIT_ENABLED",
    "PxRevoluteJointFlagEnum::eDRIVE_ENABLED",
    "PxRevoluteJointFlagEnum::eDRIVE_FREESPIN"
};

[Prefix="physx::", StackAllocatable]
interface PxRevoluteJointFlags {
    void PxRevoluteJointFlags(unsigned short flags);
    boolean isSet(PxRevoluteJointFlagEnum flag);
    void raise(PxRevoluteJointFlagEnum flag);
    void clear(PxRevoluteJointFlagEnum flag);
};

[Prefix="physx::"]
interface PxSphericalJoint {
    //[Value] PxJointLimitCone getLimitCone();
    void setLimitCone([Const, Ref] PxJointLimitCone limitCone);
    float getSwingYAngle();
    float getSwingZAngle();
    void setSphericalJointFlags([Ref] PxSphericalJointFlags flags);
    void setSphericalJointFlag(PxSphericalJointFlagEnum flag, boolean value);
    [Value] PxSphericalJointFlags getSphericalJointFlags();
};
PxSphericalJoint implements PxJoint;

enum PxSphericalJointFlagEnum {
    "PxSphericalJointFlagEnum::eLIMIT_ENABLED"
};

[Prefix="physx::", StackAllocatable]
interface PxSphericalJointFlags {
    void PxSphericalJointFlags(unsigned short flags);
    boolean isSet(PxSphericalJointFlagEnum flag);
    void raise(PxSphericalJointFlagEnum flag);
    void clear(PxSphericalJointFlagEnum flag);
};

[Prefix="physx::", StackAllocatable]
interface PxSpring {
    void PxSpring(float stiffness, float damping);
    attribute float stiffness;
    attribute float damping;
};
